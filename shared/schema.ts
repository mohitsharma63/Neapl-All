import { sql } from "drizzle-orm";
import { pgTable, text, varchar, integer, decimal, boolean, timestamp, jsonb } from "drizzle-orm/pg-core";
import { relations } from "drizzle-orm";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
import * as crypto from 'crypto';

export const users = pgTable("users", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  username: text("username").notNull().unique(),
  email: text("email").notNull().unique(),
  password: text("password").notNull(),
  firstName: text("first_name"),
  lastName: text("last_name"),
  phone: text("phone"),
  role: text("role").default("user"), // "admin", "agent", "user"
  accountType: text("account_type"), // "individual", "buyer", "seller"
  isActive: boolean("is_active").default(true),
  avatar: text("avatar"),
  country: text("country"),
  state: text("state"),
  city: text("city"),
  area: text("area"),
  address: text("address"),
  postalCode: text("postal_code"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const userCategoryPreferences = pgTable("user_category_preferences", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  categorySlug: text("category_slug").notNull(),
  subcategorySlugs: jsonb("subcategory_slugs").$type<string[]>().default([]),
  createdAt: timestamp("created_at").defaultNow(),
});

export const userDocuments = pgTable("user_documents", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  userId: varchar("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  documentName: text("document_name").notNull(),
  documentUrl: text("document_url").notNull(),
  documentType: text("document_type"),
  fileSize: integer("file_size"),
  uploadedAt: timestamp("uploaded_at").defaultNow(),
});

export const agencies = pgTable("agencies", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  ownerName: text("owner_name"),
  email: text("email"),
  phone: text("phone"),
  address: text("address"),
  logo: text("logo"),
  description: text("description"),
  verified: boolean("verified").default(false),
  propertyCount: integer("property_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const locations = pgTable("locations", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  country: text("country"),
  state: text("state"),
  city: text("city"),
  area: text("area"),
  address: text("address"),
  latitude: decimal("latitude", { precision: 10, scale: 6 }),
  longitude: decimal("longitude", { precision: 10, scale: 6 }),
  postalCode: text("postal_code"),
  propertyCount: integer("property_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const propertyCategories = pgTable("property_categories", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  icon: text("icon"),
  description: text("description"),
});

export const properties = pgTable("properties", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  title: text("title").notNull(),
  description: text("description"),
  price: decimal("price", { precision: 10, scale: 2 }).notNull(),
  priceType: text("price_type").notNull(), // "monthly", "yearly", "sale"
  propertyType: text("property_type").notNull(), // "apartment", "villa", "office", "shop"
  bedrooms: integer("bedrooms"),
  bathrooms: integer("bathrooms"),
  area: decimal("area", { precision: 8, scale: 2 }),
  furnishingStatus: text("furnishing_status"), // "furnished", "unfurnished", "semi-furnished"
  availabilityStatus: text("availability_status"), // "available", "rented", "sold"
  images: jsonb("images").$type<string[]>().default([]),
  amenities: jsonb("amenities").$type<string[]>().default([]),
  isFeatured: boolean("is_featured").default(false),
  isNegotiable: boolean("is_negotiable").default(false),

  // Relations
  locationId: varchar("location_id").references(() => locations.id),
  categoryId: varchar("category_id").references(() => propertyCategories.id),
  agencyId: varchar("agency_id").references(() => agencies.id),

  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const faqs = pgTable("faqs", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  question: text("question").notNull(),
  answer: text("answer").notNull(),
  category: text("category").notNull(), // "agent", "listing", "looking"
  order: integer("order").default(0),
  isActive: boolean("is_active").default(true),
});

export const adminCategories = pgTable("admin_categories", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  icon: text("icon"),
  color: text("color").default("#1e40af"),
  isActive: boolean("is_active").default(true),
  sortOrder: integer("sort_order").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const adminSubcategories = pgTable("admin_subcategories", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  icon: text("icon"),
  color: text("color"),
  isActive: boolean("is_active").default(true),
  sortOrder: integer("sort_order").default(0),
  parentCategoryId: varchar("parent_category_id").notNull().references(() => adminCategories.id, { onDelete: "cascade" }),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Relations
export const agenciesRelations = relations(agencies, ({ many }) => ({
  properties: many(properties),
}));

export const locationsRelations = relations(locations, ({ many }) => ({
  properties: many(properties),
}));

export const propertyCategoriesRelations = relations(propertyCategories, ({ many }) => ({
  properties: many(properties),
}));

export const propertiesRelations = relations(properties, ({ one }) => ({
  location: one(locations, {
    fields: [properties.locationId],
    references: [locations.id],
  }),
  category: one(propertyCategories, {
    fields: [properties.categoryId],
    references: [propertyCategories.id],
  }),
  agency: one(agencies, {
    fields: [properties.agencyId],
    references: [agencies.id],
  }),
}));

export const adminCategoriesRelations = relations(adminCategories, ({ many }) => ({
  subcategories: many(adminSubcategories),
}));

export const adminSubcategoriesRelations = relations(adminSubcategories, ({ one }) => ({
  parentCategory: one(adminCategories, {
    fields: [adminSubcategories.parentCategoryId],
    references: [adminCategories.id],
  }),
}));

export const propertyPages = pgTable("property_pages", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  slug: text("slug").notNull().unique(),
  description: text("description"),
  icon: text("icon"),
  priceType: text("price_type").notNull(),
  propertyFilter: text("property_filter"),
  isActive: boolean("is_active").default(true),
  sortOrder: integer("sort_order").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  username: z.string().min(3).max(50),
  email: z.string().email(),
  password: z.string().min(6),
  firstName: z.string().min(1),
  lastName: z.string().min(1),
  phone: z.string().min(10),
  accountType: z.enum(["individual", "buyer", "seller"]),
  country: z.string().optional(),
  state: z.string().optional(),
  city: z.string().optional(),
  area: z.string().optional(),
  address: z.string().optional(),
  postalCode: z.string().optional(),
});

export const insertAgencySchema = createInsertSchema(agencies).omit({
  id: true,
  createdAt: true,
  propertyCount: true,
});

export const insertLocationSchema = createInsertSchema(locations).omit({
  id: true,
  propertyCount: true,
});

export const insertPropertyCategorySchema = createInsertSchema(propertyCategories).omit({
  id: true,
});

export const insertPropertySchema = createInsertSchema(properties).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export const insertFaqSchema = createInsertSchema(faqs).omit({
  id: true,
});

export const userRelations = relations(users, ({ many }) => ({
  categoryPreferences: many(userCategoryPreferences),
  documents: many(userDocuments),
}));

export const userCategoryPreferencesRelations = relations(userCategoryPreferences, ({ one }) => ({
  user: one(users, {
    fields: [userCategoryPreferences.userId],
    references: [users.id],
  }),
}));

export const userDocumentsRelations = relations(userDocuments, ({ one }) => ({
  user: one(users, {
    fields: [userDocuments.userId],
    references: [users.id],
  }),
}));

export const insertUserCategoryPreferenceSchema = createInsertSchema(userCategoryPreferences).omit({
  id: true,
  createdAt: true,
});

export const insertUserDocumentSchema = createInsertSchema(userDocuments).omit({
  id: true,
  uploadedAt: true,
});

export const insertAdminCategorySchema = createInsertSchema(adminCategories).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
}).extend({
  description: z.string().optional().nullable(),
  icon: z.string().optional().nullable(),
  sortOrder: z.number().int().default(0),
  isActive: z.boolean().default(true),
  color: z.string().default("#1e40af"),
});

export const insertAdminSubcategorySchema = createInsertSchema(adminSubcategories).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

// export type User = typeof users.$inferSelect;
// export type InsertUser = z.infer<typeof insertUserSchema>;
export type UserCategoryPreference = typeof userCategoryPreferences.$inferSelect;
export type UserDocument = typeof userDocuments.$inferSelect;

// Rental Listings
export const rentalListings = pgTable("rental_listings", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  price: decimal("price", { precision: 10, scale: 2 }).notNull(),
  rentalType: text("rental_type").notNull(),
  bedrooms: integer("bedrooms"),
  bathrooms: integer("bathrooms"),
  area: decimal("area", { precision: 8, scale: 2 }),
  furnishingStatus: text("furnishing_status"),
  images: jsonb("images").$type<string[]>().default([]),
  amenities: jsonb("amenities").$type<string[]>().default([]),
  availableFrom: timestamp("available_from"),
  depositAmount: decimal("deposit_amount", { precision: 10, scale: 2 }),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  agencyId: varchar("agency_id").references(() => agencies.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Hostel PG Listings
export const hostelPgListings = pgTable("hostel_listings", {
  id: varchar("id").primaryKey().default(sql`gen_random_uuid()`),
  name: text("name").notNull(),
  description: text("description"),
  pricePerMonth: decimal("price_per_month", { precision: 10, scale: 2 }).notNull(),
  hostelType: text("hostel_type").notNull(),
  roomType: text("room_type").notNull(),
  totalBeds: integer("total_beds").notNull(),
  availableBeds: integer("available_beds").notNull(),
  country: text("country").notNull(),
  stateProvince: text("state_province"),
  city: text("city").notNull(),
  area: text("area"),
  fullAddress: text("full_address").notNull(),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone"),
  rules: text("rules"),
  facilities: jsonb("facilities").$type<string[]>().default([]),
  images: jsonb("images").$type<string[]>().default([]),
  foodIncluded: boolean("food_included").default(false),
  featured: boolean("featured").default(false),
  active: boolean("active").default(true),
  ownerId: varchar("owner_id").references(() => users.id, { onDelete: "set null" }),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
});

// Construction Materials
export const constructionMaterials = pgTable("construction_materials", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  name: text("name").notNull(),
  category: text("category").notNull(),
  description: text("description"),
  price: decimal("price", { precision: 10, scale: 2 }).notNull(),
  unit: text("unit").notNull(),
  brand: text("brand"),
  specifications: jsonb("specifications"),
  images: jsonb("images").$type<string[]>().default([]),
  supplierId: varchar("supplier_id"),
  supplierName: text("supplier_name"),
  supplierContact: text("supplier_contact"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  area: text("area"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  stockStatus: text("stock_status").default("in_stock"),
  minimumOrder: integer("minimum_order"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Cars & Bikes
export const carsBikes = pgTable("cars_bikes", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  vehicleType: text("vehicle_type").notNull(),
  brand: text("brand").notNull(),
  model: text("model").notNull(),
  year: integer("year").notNull(),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  kilometersDriven: integer("kilometers_driven"),
  fuelType: text("fuel_type"),
  transmission: text("transmission"),
  ownerNumber: integer("owner_number"),
  registrationNumber: text("registration_number"),
  registrationState: text("registration_state"),
  insuranceValidUntil: timestamp("insurance_valid_until"),
  color: text("color"),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  features: jsonb("features").$type<string[]>().default([]),
  condition: text("condition"),
  isNegotiable: boolean("is_negotiable").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  sellerId: varchar("seller_id").references(() => users.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Property Deals
export const propertyDeals = pgTable("property_deals", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  dealType: text("deal_type").notNull(),
  propertyType: text("property_type").notNull(),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  area: decimal("area", { precision: 10, scale: 2 }),
  areaUnit: text("area_unit").default("sq.ft"),
  bedrooms: integer("bedrooms"),
  bathrooms: integer("bathrooms"),
  floors: integer("floors"),
  roadAccess: text("road_access"),
  facingDirection: text("facing_direction"),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  features: jsonb("features").$type<string[]>().default([]),
  isNegotiable: boolean("is_negotiable").default(false),
  ownershipType: text("ownership_type"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  agencyId: varchar("agency_id").references(() => agencies.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Commercial Properties
export const commercialProperties = pgTable("commercial_properties", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  commercialType: text("commercial_type").notNull(),
  listingType: text("listing_type").notNull(),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  priceType: text("price_type"),
  area: decimal("area", { precision: 10, scale: 2 }),
  floors: integer("floors"),
  parkingSpaces: integer("parking_spaces"),
  footfall: text("footfall"),
  images: jsonb("images").$type<string[]>().default([]),
  amenities: jsonb("amenities").$type<string[]>().default([]),
  suitableFor: jsonb("suitable_for").$type<string[]>().default([]),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  agencyId: varchar("agency_id").references(() => agencies.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Industrial Land
export const industrialLand = pgTable("industrial_land", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  area: decimal("area", { precision: 10, scale: 2 }).notNull(),
  areaUnit: text("area_unit").default("ropani"),
  landType: text("land_type"),
  zoning: text("zoning"),
  roadAccess: text("road_access"),
  electricityAvailable: boolean("electricity_available").default(false),
  waterSupply: boolean("water_supply").default(false),
  sewerageAvailable: boolean("sewerage_available").default(false),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  suitableFor: jsonb("suitable_for").$type<string[]>().default([]),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  agencyId: varchar("agency_id").references(() => agencies.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Office Spaces
export const officeSpaces = pgTable("office_spaces", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  priceType: text("price_type").default("monthly"),
  area: decimal("area", { precision: 10, scale: 2 }),
  officeType: text("office_type"),
  capacity: integer("capacity"),
  cabins: integer("cabins"),
  workstations: integer("workstations"),
  meetingRooms: integer("meeting_rooms"),
  furnishingStatus: text("furnishing_status"),
  images: jsonb("images").$type<string[]>().default([]),
  amenities: jsonb("amenities").$type<string[]>().default([]),
  parkingSpaces: integer("parking_spaces"),
  floor: integer("floor"),
  totalFloors: integer("total_floors"),
  availableFrom: timestamp("available_from"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  agencyId: varchar("agency_id").references(() => agencies.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Insert schemas
export const insertPropertyPageSchema = createInsertSchema(propertyPages).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
});

export type InsertUser = z.infer<typeof insertUserSchema>;
export type User = typeof users.$inferSelect;

export type InsertAgency = z.infer<typeof insertAgencySchema>;
export type Agency = typeof agencies.$inferSelect;

export type InsertLocation = z.infer<typeof insertLocationSchema>;
export type Location = typeof locations.$inferSelect;

export type InsertPropertyCategory = z.infer<typeof insertPropertyCategorySchema>;
export type PropertyCategory = typeof propertyCategories.$inferSelect;

export type InsertProperty = z.infer<typeof insertPropertySchema>;
export type Property = typeof properties.$inferSelect;

export type InsertFaq = z.infer<typeof insertFaqSchema>;
export type Faq = typeof faqs.$inferSelect;

export type InsertAdminCategory = z.infer<typeof insertAdminCategorySchema>;
export type AdminCategory = typeof adminCategories.$inferSelect;

export type InsertAdminSubcategory = z.infer<typeof insertAdminSubcategorySchema>;
export type AdminSubcategory = typeof adminSubcategories.$inferSelect;

export const insertRentalListingSchema = createInsertSchema(rentalListings).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertRentalListing = z.infer<typeof insertRentalListingSchema>;
export type RentalListing = typeof rentalListings.$inferSelect;

export const insertHostelPgListingSchema = createInsertSchema(hostelPgListings).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertHostelPgListing = z.infer<typeof insertHostelPgListingSchema>;
export type HostelPgListing = typeof hostelPgListings.$inferSelect;

export const insertConstructionMaterialSchema = createInsertSchema(constructionMaterials).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertConstructionMaterial = z.infer<typeof insertConstructionMaterialSchema>;
export type ConstructionMaterial = typeof constructionMaterials.$inferSelect;

export const insertPropertyDealSchema = createInsertSchema(propertyDeals).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertPropertyDeal = z.infer<typeof insertPropertyDealSchema>;
export type PropertyDeal = typeof propertyDeals.$inferSelect;

export const insertCommercialPropertySchema = createInsertSchema(commercialProperties).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertCommercialProperty = z.infer<typeof insertCommercialPropertySchema>;
export type CommercialProperty = typeof commercialProperties.$inferSelect;

export const insertIndustrialLandSchema = createInsertSchema(industrialLand).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertIndustrialLand = z.infer<typeof insertIndustrialLandSchema>;
export type IndustrialLand = typeof industrialLand.$inferSelect;

export const insertOfficeSpaceSchema = createInsertSchema(officeSpaces).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertOfficeSpace = z.infer<typeof insertOfficeSpaceSchema>;
export type OfficeSpace = typeof officeSpaces.$inferSelect;

// Heavy Equipment
export const heavyEquipment = pgTable("heavy_equipment", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  equipmentType: text("equipment_type").notNull(),
  category: text("category").notNull(),
  brand: text("brand"),
  model: text("model"),
  year: integer("year"),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  priceType: text("price_type").default("total"),
  condition: text("condition"),
  hoursUsed: integer("hours_used"),
  serialNumber: text("serial_number"),
  specifications: jsonb("specifications"),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  features: jsonb("features").$type<string[]>().default([]),
  maintenanceHistory: text("maintenance_history"),
  warrantyInfo: text("warranty_info"),
  isNegotiable: boolean("is_negotiable").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  sellerId: varchar("seller_id").references(() => users.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertHeavyEquipmentSchema = createInsertSchema(heavyEquipment).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertHeavyEquipment = z.infer<typeof insertHeavyEquipmentSchema>;
export type HeavyEquipment = typeof heavyEquipment.$inferSelect;

// Showrooms (Authorized Second-hand)
export const showrooms = pgTable("showrooms", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  showroomName: text("showroom_name").notNull(),
  authorizedBrand: text("authorized_brand"),
  vehicleType: text("vehicle_type").notNull(),
  vehicleDetails: jsonb("vehicle_details"),
  year: integer("year"),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  priceType: text("price_type").default("fixed"),
  mileage: integer("mileage"),
  fuelType: text("fuel_type"),
  transmission: text("transmission"),
  color: text("color"),
  registrationNumber: text("registration_number"),
  registrationYear: integer("registration_year"),
  ownerCount: integer("owner_count"),
  warrantyAvailable: boolean("warranty_available").default(false),
  warrantyDetails: text("warranty_details"),
  serviceHistory: boolean("service_history").default(false),
  certificationDetails: text("certification_details"),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  features: jsonb("features").$type<string[]>().default([]),
  isCertified: boolean("is_certified").default(true),
  inspectionReport: text("inspection_report"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  showroomContact: text("showroom_contact"),
  showroomEmail: text("showroom_email"),
  locationId: varchar("location_id").references(() => locations.id),
  sellerId: varchar("seller_id").references(() => users.id),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertShowroomSchema = createInsertSchema(showrooms).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertShowroom = z.infer<typeof insertShowroomSchema>;
export type Showroom = typeof showrooms.$inferSelect;

// Second Hand Cars & Bikes
export const secondHandCarsBikes = pgTable("second_hand_cars_bikes", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  vehicleType: text("vehicle_type").notNull(),
  brand: text("brand").notNull(),
  model: text("model").notNull(),
  variant: text("variant"),
  year: integer("year").notNull(),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  kilometersDriven: integer("kilometers_driven"),
  fuelType: text("fuel_type"),
  transmission: text("transmission"),
  ownerNumber: integer("owner_number"),
  registrationNumber: text("registration_number"),
  registrationState: text("registration_state"),
  registrationYear: integer("registration_year"),
  insuranceType: text("insurance_type"),
  insuranceValidUntil: timestamp("insurance_valid_until"),
  taxValidity: timestamp("tax_validity"),
  color: text("color"),
  bodyType: text("body_type"),
  seatingCapacity: integer("seating_capacity"),
  engineCapacity: integer("engine_capacity"),
  mileageKmpl: decimal("mileage_kmpl", { precision: 5, scale: 2 }),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  features: jsonb("features").$type<string[]>().default([]),
  condition: text("condition"),
  accidentHistory: boolean("accident_history").default(false),
  floodAffected: boolean("flood_affected").default(false),
  serviceRecordsAvailable: boolean("service_records_available").default(false),
  nocAvailable: boolean("noc_available").default(false),
  isNegotiable: boolean("is_negotiable").default(false),
  exchangeAccepted: boolean("exchange_accepted").default(false),
  testDriveAvailable: boolean("test_drive_available").default(true),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id),
  sellerId: varchar("seller_id").references(() => users.id),
  sellerType: text("seller_type"),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone"),
  contactEmail: text("contact_email"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertSecondHandCarsBikesSchema = createInsertSchema(secondHandCarsBikes).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertSecondHandCarsBikes = z.infer<typeof insertSecondHandCarsBikesSchema>;
export type SecondHandCarsBikes = typeof secondHandCarsBikes.$inferSelect;

export type InsertPropertyPage = z.infer<typeof insertPropertyPageSchema>;
export type PropertyPage = typeof propertyPages.$inferSelect;

// Car & Bike Rentals
export const carBikeRentals = pgTable("car_bike_rentals", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  rentalType: text("rental_type").notNull(),
  brand: text("brand").notNull(),
  model: text("model").notNull(),
  year: integer("year"),
  rentalPricePerDay: decimal("rental_price_per_day", { precision: 10, scale: 2 }).notNull(),
  rentalPricePerHour: decimal("rental_price_per_hour", { precision: 10, scale: 2 }),
  rentalPricePerWeek: decimal("rental_price_per_week", { precision: 10, scale: 2 }),
  rentalPricePerMonth: decimal("rental_price_per_month", { precision: 10, scale: 2 }),
  securityDeposit: decimal("security_deposit", { precision: 10, scale: 2 }),
  fuelType: text("fuel_type"),
  transmission: text("transmission"),
  seatingCapacity: integer("seating_capacity"),
  mileageLimitPerDay: integer("mileage_limit_per_day"),
  extraKmCharge: decimal("extra_km_charge", { precision: 8, scale: 2 }),
  color: text("color"),
  registrationNumber: text("registration_number"),
  insuranceIncluded: boolean("insurance_included").default(true),
  fuelPolicy: text("fuel_policy"),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  features: jsonb("features").$type<string[]>().default([]),
  condition: text("condition"),
  minimumRentalDuration: integer("minimum_rental_duration").default(1),
  minimumRentalDurationUnit: text("minimum_rental_duration_unit").default("day"),
  maximumRentalDuration: integer("maximum_rental_duration"),
  driverAvailable: boolean("driver_available").default(false),
  driverChargesPerDay: decimal("driver_charges_per_day", { precision: 8, scale: 2 }),
  ageRequirement: integer("age_requirement").default(21),
  licenseRequired: boolean("license_required").default(true),
  pickupDeliveryAvailable: boolean("pickup_delivery_available").default(false),
  pickupDeliveryCharges: decimal("pickup_delivery_charges", { precision: 8, scale: 2 }),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  pickupLocation: text("pickup_location"),
  locationId: varchar("location_id").references(() => locations.id),
  ownerId: varchar("owner_id").references(() => users.id),
  rentalCompanyName: text("rental_company_name"),
  rentalCompanyContact: text("rental_company_contact"),
  rentalCompanyEmail: text("rental_company_email"),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  viewCount: integer("view_count").default(0),
  bookingCount: integer("booking_count").default(0),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertCarBikeRentalSchema = createInsertSchema(carBikeRentals).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertCarBikeRental = z.infer<typeof insertCarBikeRentalSchema>;
export type CarBikeRental = typeof carBikeRentals.$inferSelect;

// Transportation/Moving Services
export const transportationMovingServices = pgTable("transportation_moving_services", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  serviceType: text("service_type").notNull(),
  basePrice: decimal("base_price", { precision: 10, scale: 2 }).notNull(),
  priceType: text("price_type").default("per_trip"),
  pricePerKm: decimal("price_per_km", { precision: 8, scale: 2 }),
  pricePerHour: decimal("price_per_hour", { precision: 8, scale: 2 }),
  minimumCharge: decimal("minimum_charge", { precision: 10, scale: 2 }),
  vehicleType: text("vehicle_type"),
  vehicleCapacity: text("vehicle_capacity"),
  numberOfVehicles: integer("number_of_vehicles").default(1),
  vehicleDetails: jsonb("vehicle_details"),
  servicesOffered: jsonb("services_offered").$type<string[]>().default([]),
  availableRoutes: jsonb("available_routes").$type<string[]>().default([]),
  packingMaterialIncluded: boolean("packing_material_included").default(false),
  loadingUnloadingIncluded: boolean("loading_unloading_included").default(true),
  insuranceAvailable: boolean("insurance_available").default(false),
  insuranceCoverageAmount: decimal("insurance_coverage_amount", { precision: 12, scale: 2 }),
  available24_7: boolean("available_24_7").default(false),
  workingHours: text("working_hours"),
  advanceBookingRequired: boolean("advance_booking_required").default(true),
  minimumBookingHours: integer("minimum_booking_hours").default(24),
  companyName: text("company_name"),
  ownerName: text("owner_name"),
  licenseNumber: text("license_number"),
  registrationNumber: text("registration_number"),
  experienceYears: integer("experience_years"),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  serviceAreas: jsonb("service_areas").$type<string[]>().default([]),
  operatingCities: jsonb("operating_cities").$type<string[]>().default([]),
  locationId: varchar("location_id").references(() => locations.id),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  paymentTerms: text("payment_terms"),
  refundPolicy: text("refund_policy"),
  gpsTracking: boolean("gps_tracking").default(false),
  helpersAvailable: boolean("helpers_available").default(true),
  numberOfHelpers: integer("number_of_helpers"),
  helperCharges: decimal("helper_charges", { precision: 8, scale: 2 }),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  totalBookings: integer("total_bookings").default(0),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  ownerId: varchar("owner_id").references(() => users.id),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertTransportationMovingServiceSchema = createInsertSchema(transportationMovingServices).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertTransportationMovingService = z.infer<typeof insertTransportationMovingServiceSchema>;
export type TransportationMovingService = typeof transportationMovingServices.$inferSelect;

// Vehicle License Classes
export const vehicleLicenseClasses = pgTable("vehicle_license_classes", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  licenseClass: text("license_class").notNull(),
  vehicleType: text("vehicle_type").notNull(),
  licenseType: text("license_type").notNull(),
  trainingProviderName: text("training_provider_name").notNull(),
  isRtoApproved: boolean("is_rto_approved").default(false),
  rtoApprovalNumber: text("rto_approval_number"),
  instructorName: text("instructor_name"),
  instructorExperienceYears: integer("instructor_experience_years"),
  instructorLicenseNumber: text("instructor_license_number"),
  courseDurationDays: integer("course_duration_days").notNull(),
  courseDurationHours: integer("course_duration_hours"),
  trainingMode: text("training_mode"),
  courseIncludes: jsonb("course_includes").$type<string[]>().default([]),
  syllabusCovered: jsonb("syllabus_covered").$type<string[]>().default([]),
  courseFee: decimal("course_fee", { precision: 10, scale: 2 }).notNull(),
  registrationFee: decimal("registration_fee", { precision: 10, scale: 2 }),
  testFee: decimal("test_fee", { precision: 10, scale: 2 }),
  totalFee: decimal("total_fee", { precision: 10, scale: 2 }),
  installmentAvailable: boolean("installment_available").default(false),
  discountAvailable: boolean("discount_available").default(false),
  discountPercentage: decimal("discount_percentage", { precision: 5, scale: 2 }),
  minimumAge: integer("minimum_age"),
  educationalQualification: text("educational_qualification"),
  medicalCertificateRequired: boolean("medical_certificate_required").default(true),
  documentsRequired: jsonb("documents_required").$type<string[]>().default([]),
  practicalTrainingHours: integer("practical_training_hours"),
  theoryClassesHours: integer("theory_classes_hours"),
  simulationTraining: boolean("simulation_training").default(false),
  drivingTrackAvailable: boolean("driving_track_available").default(false),
  pickupDropFacility: boolean("pickup_drop_facility").default(false),
  studyMaterialProvided: boolean("study_material_provided").default(false),
  onlineTestPractice: boolean("online_test_practice").default(false),
  rtoTestAssistance: boolean("rto_test_assistance").default(false),
  trainingVehicles: jsonb("training_vehicles").$type<string[]>().default([]),
  vehicleCondition: text("vehicle_condition"),
  dualControlVehicles: boolean("dual_control_vehicles").default(true),
  batchSize: integer("batch_size"),
  currentBatchSeats: integer("current_batch_seats"),
  nextBatchStartDate: text("next_batch_start_date"),
  classTimings: text("class_timings"),
  weekendBatches: boolean("weekend_batches").default(false),
  successRatePercentage: decimal("success_rate_percentage", { precision: 5, scale: 2 }),
  totalStudentsTrained: integer("total_students_trained"),
  certificationProvided: boolean("certification_provided").default(true),
  governmentCertified: boolean("government_certified").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address").notNull(),
  trainingCenterAddress: text("training_center_address"),
  multipleLocations: boolean("multiple_locations").default(false),
  contactPerson: text("contact_person").notNull(),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappNumber: text("whatsapp_number"),
  websiteUrl: text("website_url"),
  images: jsonb("images").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  videoUrl: text("video_url"),
  virtualTourUrl: text("virtual_tour_url"),
  jobPlacementAssistance: boolean("job_placement_assistance").default(false),
  refresherCourseAvailable: boolean("refresher_course_available").default(false),
  internationalLicenseTraining: boolean("international_license_training").default(false),
  femaleInstructorAvailable: boolean("female_instructor_available").default(false),
  languageOptions: jsonb("language_options").$type<string[]>().default([]),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  refundPolicy: text("refund_policy"),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  totalEnrollments: integer("total_enrollments").default(0),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  ownerId: varchar("owner_id").references(() => users.id),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertVehicleLicenseClassSchema = createInsertSchema(vehicleLicenseClasses).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertVehicleLicenseClass = z.infer<typeof insertVehicleLicenseClassSchema>;
export type VehicleLicenseClass = typeof vehicleLicenseClasses.$inferSelect;

// Electronics & Gadgets
export const electronicsGadgets = pgTable("electronics_gadgets", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  category: text("category").notNull(),
  subcategory: text("subcategory"),
  brand: text("brand").notNull(),
  model: text("model").notNull(),
  productName: text("product_name"),
  color: text("color"),
  storageCapacity: text("storage_capacity"),
  ram: text("ram"),
  processor: text("processor"),
  screenSize: text("screen_size"),
  batteryCapacity: text("battery_capacity"),
  cameraSpecs: text("camera_specs"),
  operatingSystem: text("operating_system"),
  connectivity: jsonb("connectivity").$type<string[]>().default([]),
  condition: text("condition").notNull(),
  usageDuration: text("usage_duration"),
  purchaseDate: text("purchase_date"),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  originalPrice: decimal("original_price", { precision: 12, scale: 2 }),
  rentalPricePerDay: decimal("rental_price_per_day", { precision: 10, scale: 2 }),
  rentalPricePerMonth: decimal("rental_price_per_month", { precision: 10, scale: 2 }),
  isNegotiable: boolean("is_negotiable").default(false),
  warrantyAvailable: boolean("warranty_available").default(false),
  warrantyPeriod: text("warranty_period"),
  warrantyType: text("warranty_type"),
  billAvailable: boolean("bill_available").default(false),
  boxAvailable: boolean("box_available").default(false),
  accessoriesIncluded: jsonb("accessories_included").$type<string[]>().default([]),
  chargerIncluded: boolean("charger_included").default(true),
  originalAccessories: boolean("original_accessories").default(false),
  screenCondition: text("screen_condition"),
  bodyCondition: text("body_condition"),
  functionalIssues: jsonb("functional_issues").$type<string[]>().default([]),
  repairsDone: text("repairs_done"),
  waterDamage: boolean("water_damage").default(false),
  exchangeAccepted: boolean("exchange_accepted").default(false),
  exchangePreferences: text("exchange_preferences"),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  sellerId: varchar("seller_id").references(() => users.id, { onDelete: "set null" }),
  sellerType: text("seller_type"),
  shopName: text("shop_name"),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  deliveryAvailable: boolean("delivery_available").default(false),
  deliveryCharges: decimal("delivery_charges", { precision: 8, scale: 2 }),
  pickupAvailable: boolean("pickup_available").default(true),
  shippingOptions: jsonb("shipping_options").$type<string[]>().default([]),
  reasonForSelling: text("reason_for_selling"),
  purchasedFrom: text("purchased_from"),
  imeiNumber: text("imei_number"),
  serialNumber: text("serial_number"),
  features: jsonb("features").$type<string[]>().default([]),
  additionalInfo: text("additional_info"),
  returnPolicy: text("return_policy"),
  refundAvailable: boolean("refund_available").default(false),
  testingAllowed: boolean("testing_allowed").default(true),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  isUrgent: boolean("is_urgent").default(false),
  viewCount: integer("view_count").default(0),
  inquiryCount: integer("inquiry_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertElectronicsGadgetSchema = createInsertSchema(electronicsGadgets).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertElectronicsGadget = z.infer<typeof insertElectronicsGadgetSchema>;
export type ElectronicsGadget = typeof electronicsGadgets.$inferSelect;

// Phones, Tablets & Accessories
export const phonesTabletsAccessories = pgTable("phones_tablets_accessories", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  category: text("category").notNull(),
  subcategory: text("subcategory"),
  productType: text("product_type"),
  brand: text("brand").notNull(),
  model: text("model").notNull(),
  productName: text("product_name"),
  color: text("color"),
  storageCapacity: text("storage_capacity"),
  ram: text("ram"),
  processor: text("processor"),
  screenSize: text("screen_size"),
  batteryCapacity: text("battery_capacity"),
  cameraSpecs: text("camera_specs"),
  operatingSystem: text("operating_system"),
  connectivity: jsonb("connectivity").$type<string[]>().default([]),
  displayType: text("display_type"),
  refreshRate: text("refresh_rate"),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  mrp: decimal("mrp", { precision: 12, scale: 2 }),
  discountPercentage: decimal("discount_percentage", { precision: 5, scale: 2 }),
  rentalPricePerDay: decimal("rental_price_per_day", { precision: 10, scale: 2 }),
  rentalPricePerMonth: decimal("rental_price_per_month", { precision: 10, scale: 2 }),
  emiAvailable: boolean("emi_available").default(false),
  emiStartingFrom: decimal("emi_starting_from", { precision: 10, scale: 2 }),
  warrantyPeriod: text("warranty_period"),
  warrantyType: text("warranty_type"),
  manufacturerWarranty: boolean("manufacturer_warranty").default(true),
  extendedWarrantyAvailable: boolean("extended_warranty_available").default(false),
  inStock: boolean("in_stock").default(true),
  stockQuantity: integer("stock_quantity"),
  expectedDeliveryDays: integer("expected_delivery_days"),
  keyFeatures: jsonb("key_features").$type<string[]>().default([]),
  accessoriesIncluded: jsonb("accessories_included").$type<string[]>().default([]),
  boxContents: jsonb("box_contents").$type<string[]>().default([]),
  compatibleDevices: jsonb("compatible_devices").$type<string[]>().default([]),
  accessoryType: text("accessory_type"),
  material: text("material"),
  isOnSale: boolean("is_on_sale").default(false),
  saleEndDate: timestamp("sale_end_date"),
  bankOffers: jsonb("bank_offers").$type<string[]>().default([]),
  exchangeOffer: boolean("exchange_offer").default(false),
  exchangeDiscountUpTo: decimal("exchange_discount_up_to", { precision: 10, scale: 2 }),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  productBrochure: text("product_brochure"),
  sellerId: varchar("seller_id").references(() => users.id, { onDelete: "set null" }),
  sellerType: text("seller_type"),
  shopName: text("shop_name"),
  brandAuthorized: boolean("brand_authorized").default(false),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  freeDelivery: boolean("free_delivery").default(false),
  deliveryCharges: decimal("delivery_charges", { precision: 8, scale: 2 }),
  sameDayDelivery: boolean("same_day_delivery").default(false),
  codAvailable: boolean("cod_available").default(true),
  shippingOptions: jsonb("shipping_options").$type<string[]>().default([]),
  deliveryAreas: jsonb("delivery_areas").$type<string[]>().default([]),
  bisCertified: boolean("bis_certified").default(false),
  certificationDetails: text("certification_details"),
  originalProduct: boolean("original_product").default(true),
  madeIn: text("made_in"),
  launchDate: text("launch_date"),
  specifications: jsonb("specifications"),
  technicalDetails: text("technical_details"),
  returnPolicy: text("return_policy"),
  returnPeriodDays: integer("return_period_days"),
  replacementPolicy: text("replacement_policy"),
  refundAvailable: boolean("refund_available").default(true),
  customerCareNumber: text("customer_care_number"),
  serviceCenterAvailable: boolean("service_center_available").default(false),
  installationSupport: boolean("installation_support").default(false),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  isTrending: boolean("is_trending").default(false),
  isNewArrival: boolean("is_new_arrival").default(false),
  isBestSeller: boolean("is_best_seller").default(false),
  viewCount: integer("view_count").default(0),
  inquiryCount: integer("inquiry_count").default(0),
  purchaseCount: integer("purchase_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertPhonesTabletsAccessoriesSchema = createInsertSchema(phonesTabletsAccessories).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertPhonesTabletsAccessories = z.infer<typeof insertPhonesTabletsAccessoriesSchema>;
export type PhonesTabletsAccessories = typeof phonesTabletsAccessories.$inferSelect;

// Second Hand Phones, Tablets & Accessories
export const secondHandPhonesTabletsAccessories = pgTable("second_hand_phones_tablets_accessories", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  category: text("category").notNull(),
  subcategory: text("subcategory"),
  productType: text("product_type"),
  brand: text("brand").notNull(),
  model: text("model").notNull(),
  variant: text("variant"),
  color: text("color"),
  storageCapacity: text("storage_capacity"),
  ram: text("ram"),
  processor: text("processor"),
  screenSize: text("screen_size"),
  batteryCapacity: text("battery_capacity"),
  cameraSpecs: text("camera_specs"),
  operatingSystem: text("operating_system"),
  connectivity: jsonb("connectivity").$type<string[]>().default([]),
  displayType: text("display_type"),
  refreshRate: text("refresh_rate"),
  condition: text("condition").notNull(),
  usageDuration: text("usage_duration"),
  purchaseDate: text("purchase_date"),
  purchaseYear: integer("purchase_year"),
  ageInMonths: integer("age_in_months"),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  originalPrice: decimal("original_price", { precision: 12, scale: 2 }),
  negotiable: boolean("negotiable").default(false),
  rentalPricePerDay: decimal("rental_price_per_day", { precision: 10, scale: 2 }),
  rentalPricePerMonth: decimal("rental_price_per_month", { precision: 10, scale: 2 }),
  exchangeAccepted: boolean("exchange_accepted").default(false),
  exchangePreferences: text("exchange_preferences"),
  exchangeValueUpTo: decimal("exchange_value_up_to", { precision: 10, scale: 2 }),
  warrantyAvailable: boolean("warranty_available").default(false),
  warrantyPeriod: text("warranty_period"),
  warrantyType: text("warranty_type"),
  warrantyValidUntil: text("warranty_valid_until"),
  billAvailable: boolean("bill_available").default(false),
  boxAvailable: boolean("box_available").default(false),
  originalAccessories: boolean("original_accessories").default(false),
  accessoriesIncluded: jsonb("accessories_included").$type<string[]>().default([]),
  chargerIncluded: boolean("charger_included").default(true),
  screenCondition: text("screen_condition"),
  bodyCondition: text("body_condition"),
  scratchesPresent: boolean("scratches_present").default(false),
  screenGuard: boolean("screen_guard").default(false),
  backCover: boolean("back_cover").default(false),
  functionalIssues: jsonb("functional_issues").$type<string[]>().default([]),
  repairsDone: text("repairs_done"),
  batteryHealth: text("battery_health"),
  waterDamage: boolean("water_damage").default(false),
  imeiNumber: text("imei_number"),
  serialNumber: text("serial_number"),
  fingerprintSensor: boolean("fingerprint_sensor").default(false),
  faceUnlock: boolean("face_unlock").default(false),
  dualSim: boolean("dual_sim").default(false),
  expandableMemory: boolean("expandable_memory").default(false),
  keyFeatures: jsonb("key_features").$type<string[]>().default([]),
  specifications: jsonb("specifications"),
  compatibleDevices: jsonb("compatible_devices").$type<string[]>().default([]),
  accessoryType: text("accessory_type"),
  material: text("material"),
  accessoryCondition: text("accessory_condition"),
  reasonForSelling: text("reason_for_selling"),
  purchasedFrom: text("purchased_from"),
  upgradePurchase: boolean("upgrade_purchase").default(false),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  sellerId: varchar("seller_id").references(() => users.id, { onDelete: "set null" }),
  sellerType: text("seller_type"),
  shopName: text("shop_name"),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  whatsappNumber: text("whatsapp_number"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  deliveryAvailable: boolean("delivery_available").default(false),
  deliveryCharges: decimal("delivery_charges", { precision: 8, scale: 2 }),
  pickupAvailable: boolean("pickup_available").default(true),
  shippingOptions: jsonb("shipping_options").$type<string[]>().default([]),
  codAvailable: boolean("cod_available").default(false),
  testingAllowed: boolean("testing_allowed").default(true),
  testingLocation: text("testing_location"),
  returnPolicy: text("return_policy"),
  returnPeriodDays: integer("return_period_days"),
  refundAvailable: boolean("refund_available").default(false),
  urgentSale: boolean("urgent_sale").default(false),
  priceDrop: boolean("price_drop").default(false),
  previousOwners: integer("previous_owners").default(1),
  additionalInfo: text("additional_info"),
  sellerRating: decimal("seller_rating", { precision: 3, scale: 2 }),
  sellerReviewCount: integer("seller_review_count").default(0),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  isUrgent: boolean("is_urgent").default(false),
  viewCount: integer("view_count").default(0),
  inquiryCount: integer("inquiry_count").default(0),
  favoriteCount: integer("favorite_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  soldAt: timestamp("sold_at"),
});

export const insertSecondHandPhonesTabletsAccessoriesSchema = createInsertSchema(secondHandPhonesTabletsAccessories).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertSecondHandPhonesTabletsAccessories = z.infer<typeof insertSecondHandPhonesTabletsAccessoriesSchema>;
export type SecondHandPhonesTabletsAccessories = typeof secondHandPhonesTabletsAccessories.$inferSelect;

// Computer, Mobile & Laptop Repair Services
export const computerMobileLaptopRepairServices = pgTable("computer_mobile_laptop_repair_services", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  serviceType: text("service_type").notNull(),
  repairCategories: jsonb("repair_categories").$type<string[]>().default([]),
  devicesSupported: jsonb("devices_supported").$type<string[]>().default([]),
  brandsSupported: jsonb("brands_supported").$type<string[]>().default([]),
  baseServiceCharge: decimal("base_service_charge", { precision: 10, scale: 2 }).notNull(),
  inspectionCharge: decimal("inspection_charge", { precision: 8, scale: 2 }),
  minimumCharge: decimal("minimum_charge", { precision: 10, scale: 2 }),
  hourlyRate: decimal("hourly_rate", { precision: 8, scale: 2 }),
  pricingType: text("pricing_type").default("fixed"),
  freeInspection: boolean("free_inspection").default(false),
  servicesOffered: jsonb("services_offered").$type<string[]>().default([]),
  hardwareRepair: boolean("hardware_repair").default(true),
  softwareRepair: boolean("software_repair").default(true),
  dataRecovery: boolean("data_recovery").default(false),
  virusRemoval: boolean("virus_removal").default(true),
  screenReplacement: boolean("screen_replacement").default(true),
  batteryReplacement: boolean("battery_replacement").default(true),
  motherboardRepair: boolean("motherboard_repair").default(false),
  keyboardReplacement: boolean("keyboard_replacement").default(false),
  chargingPortRepair: boolean("charging_port_repair").default(false),
  waterDamageRepair: boolean("water_damage_repair").default(false),
  warrantyProvided: boolean("warranty_provided").default(false),
  warrantyPeriod: text("warranty_period"),
  warrantyDetails: text("warranty_details"),
  genuinePartsUsed: boolean("genuine_parts_used").default(true),
  onsiteService: boolean("onsite_service").default(false),
  pickupDeliveryService: boolean("pickup_delivery_service").default(false),
  pickupDeliveryCharges: decimal("pickup_delivery_charges", { precision: 8, scale: 2 }),
  sameDayService: boolean("same_day_service").default(false),
  emergencyService: boolean("emergency_service").default(false),
  emergencyCharges: decimal("emergency_charges", { precision: 8, scale: 2 }),
  businessName: text("business_name").notNull(),
  ownerName: text("owner_name"),
  registrationNumber: text("registration_number"),
  experienceYears: integer("experience_years"),
  certifiedTechnician: boolean("certified_technician").default(false),
  certificationDetails: text("certification_details"),
  authorizedServiceCenter: boolean("authorized_service_center").default(false),
  authorizedBrands: jsonb("authorized_brands").$type<string[]>().default([]),
  contactPerson: text("contact_person").notNull(),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappNumber: text("whatsapp_number"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address").notNull(),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  serviceAreas: jsonb("service_areas").$type<string[]>().default([]),
  workingHours: text("working_hours"),
  workingDays: text("working_days"),
  available24_7: boolean("available_24_7").default(false),
  holidayService: boolean("holiday_service").default(false),
  advanceBookingRequired: boolean("advance_booking_required").default(false),
  freeDiagnostic: boolean("free_diagnostic").default(false),
  freeEstimate: boolean("free_estimate").default(true),
  homeVisitAvailable: boolean("home_visit_available").default(false),
  homeVisitCharges: decimal("home_visit_charges", { precision: 8, scale: 2 }),
  bulkServiceDiscount: boolean("bulk_service_discount").default(false),
  corporateService: boolean("corporate_service").default(false),
  studentDiscount: boolean("student_discount").default(false),
  seniorCitizenDiscount: boolean("senior_citizen_discount").default(false),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  certifications: jsonb("certifications").$type<string[]>().default([]),
  paymentMethods: jsonb("payment_methods").$type<string[]>().default([]),
  advancePaymentRequired: boolean("advance_payment_required").default(false),
  advancePaymentPercentage: decimal("advance_payment_percentage", { precision: 5, scale: 2 }),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  refundPolicy: text("refund_policy"),
  customerSupportNumber: text("customer_support_number"),
  complaintNumber: text("complaint_number"),
  supportEmail: text("support_email"),
  responseTime: text("response_time"),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  totalRepairs: integer("total_repairs").default(0),
  totalCustomers: integer("total_customers").default(0),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  ownerId: varchar("owner_id").references(() => users.id, { onDelete: "set null" }),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertComputerMobileLaptopRepairServiceSchema = createInsertSchema(computerMobileLaptopRepairServices).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertComputerMobileLaptopRepairService = z.infer<typeof insertComputerMobileLaptopRepairServiceSchema>;
export type ComputerMobileLaptopRepairService = typeof computerMobileLaptopRepairServices.$inferSelect;

// Cyber Café / Internet Services
export const cyberCafeInternetServices = pgTable("cyber_cafe_internet_services", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  cafeName: text("cafe_name").notNull(),
  serviceType: text("service_type").notNull(),
  servicesOffered: jsonb("services_offered").$type<string[]>().default([]),
  internetBrowsing: boolean("internet_browsing").default(true),
  printingService: boolean("printing_service").default(true),
  scanningService: boolean("scanning_service").default(true),
  photocopyingService: boolean("photocopying_service").default(true),
  laminationService: boolean("lamination_service").default(false),
  bindingService: boolean("binding_service").default(false),
  gamingAvailable: boolean("gaming_available").default(false),
  videoConferencing: boolean("video_conferencing").default(false),
  onlineClassesSupport: boolean("online_classes_support").default(false),
  internetPricePerHour: decimal("internet_price_per_hour", { precision: 8, scale: 2 }).notNull(),
  internetPricePerDay: decimal("internet_price_per_day", { precision: 8, scale: 2 }),
  printingPriceBw: decimal("printing_price_bw", { precision: 6, scale: 2 }),
  printingPriceColor: decimal("printing_price_color", { precision: 6, scale: 2 }),
  scanningPrice: decimal("scanning_price", { precision: 6, scale: 2 }),
  photocopyingPrice: decimal("photocopying_price", { precision: 6, scale: 2 }),
  gamingPricePerHour: decimal("gaming_price_per_hour", { precision: 8, scale: 2 }),
  minimumCharge: decimal("minimum_charge", { precision: 8, scale: 2 }),
  membershipAvailable: boolean("membership_available").default(false),
  membershipPlans: jsonb("membership_plans").$type<string[]>().default([]),
  totalComputers: integer("total_computers"),
  availableComputers: integer("available_computers"),
  computerSpecifications: text("computer_specifications"),
  internetSpeed: text("internet_speed"),
  wifiAvailable: boolean("wifi_available").default(false),
  printerTypes: jsonb("printer_types").$type<string[]>().default([]),
  scannerType: text("scanner_type"),
  privateCabins: boolean("private_cabins").default(false),
  numberOfCabins: integer("number_of_cabins"),
  acAvailable: boolean("ac_available").default(false),
  parkingAvailable: boolean("parking_available").default(false),
  softwareAvailable: jsonb("software_available").$type<string[]>().default([]),
  operatingSystems: jsonb("operating_systems").$type<string[]>().default([]),
  gamingSetup: boolean("gaming_setup").default(false),
  gamingTitles: jsonb("gaming_titles").$type<string[]>().default([]),
  ownerName: text("owner_name"),
  licenseNumber: text("license_number"),
  establishedYear: integer("established_year"),
  experienceYears: integer("experience_years"),
  contactPerson: text("contact_person").notNull(),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  whatsappNumber: text("whatsapp_number"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address").notNull(),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  nearbyLandmarks: text("nearby_landmarks"),
  workingHours: text("working_hours"),
  open24_7: boolean("open_24_7").default(false),
  workingDays: text("working_days"),
  holidayList: text("holiday_list"),
  studentDiscount: boolean("student_discount").default(false),
  studentDiscountPercentage: decimal("student_discount_percentage", { precision: 5, scale: 2 }),
  bulkPrintingDiscount: boolean("bulk_printing_discount").default(false),
  homeDelivery: boolean("home_delivery").default(false),
  pickupService: boolean("pickup_service").default(false),
  onlineBooking: boolean("online_booking").default(false),
  prepaidPackages: boolean("prepaid_packages").default(false),
  cctvSurveillance: boolean("cctv_surveillance").default(false),
  dataPrivacyEnsured: boolean("data_privacy_ensured").default(true),
  antivirusInstalled: boolean("antivirus_installed").default(true),
  firewallProtection: boolean("firewall_protection").default(true),
  paymentMethods: jsonb("payment_methods").$type<string[]>().default([]),
  advancePaymentRequired: boolean("advance_payment_required").default(false),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  refundPolicy: text("refund_policy"),
  usagePolicy: text("usage_policy"),
  foodBeveragesAvailable: boolean("food_beverages_available").default(false),
  stationaryAvailable: boolean("stationary_available").default(false),
  chargingPoints: boolean("charging_points").default(false),
  restArea: boolean("rest_area").default(false),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  totalCustomers: integer("total_customers").default(0),
  examFormFilling: boolean("exam_form_filling").default(false),
  resumeMaking: boolean("resume_making").default(false),
  documentTyping: boolean("document_typing").default(false),
  translationService: boolean("translation_service").default(false),
  passportPhoto: boolean("passport_photo").default(false),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  ownerId: varchar("owner_id").references(() => users.id, { onDelete: "set null" }),
  viewCount: integer("view_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertCyberCafeInternetServiceSchema = createInsertSchema(cyberCafeInternetServices).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertCyberCafeInternetService = z.infer<typeof insertCyberCafeInternetServiceSchema>;
export type CyberCafeInternetService = typeof cyberCafeInternetServices.$inferSelect;

// Furniture & Interior Decor
export const furnitureInteriorDecor = pgTable("furniture_interior_decor", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  listingType: text("listing_type").notNull(),
  category: text("category").notNull(),
  subcategory: text("subcategory"),
  itemType: text("item_type"),
  brand: text("brand"),
  material: text("material"),
  color: text("color"),
  dimensions: text("dimensions"),
  weight: text("weight"),
  condition: text("condition"),
  ageInMonths: integer("age_in_months"),
  price: decimal("price", { precision: 12, scale: 2 }).notNull(),
  originalPrice: decimal("original_price", { precision: 12, scale: 2 }),
  rentalPricePerDay: decimal("rental_price_per_day", { precision: 10, scale: 2 }),
  rentalPricePerWeek: decimal("rental_price_per_week", { precision: 10, scale: 2 }),
  rentalPricePerMonth: decimal("rental_price_per_month", { precision: 10, scale: 2 }),
  minimumRentalPeriod: integer("minimum_rental_period"),
  rentalPeriodUnit: text("rental_period_unit"),
  isNegotiable: boolean("is_negotiable").default(false),
  assemblyRequired: boolean("assembly_required").default(false),
  assemblyServiceAvailable: boolean("assembly_service_available").default(false),
  assemblyCharges: decimal("assembly_charges", { precision: 8, scale: 2 }),
  customMade: boolean("custom_made").default(false),
  customizationAvailable: boolean("customization_available").default(false),
  style: text("style"),
  roomType: text("room_type"),
  seatingCapacity: integer("seating_capacity"),
  warrantyAvailable: boolean("warranty_available").default(false),
  warrantyPeriod: text("warranty_period"),
  warrantyType: text("warranty_type"),
  billAvailable: boolean("bill_available").default(false),
  setItems: integer("set_items"),
  isSet: boolean("is_set").default(false),
  serviceType: text("service_type"),
  servicesOffered: jsonb("services_offered").$type<string[]>().default([]),
  interiorDesign: boolean("interior_design").default(false),
  consultationAvailable: boolean("consultation_available").default(false),
  consultationCharges: decimal("consultation_charges", { precision: 8, scale: 2 }),
  installationService: boolean("installation_service").default(false),
  installationCharges: decimal("installation_charges", { precision: 8, scale: 2 }),
  repairService: boolean("repair_service").default(false),
  restorationService: boolean("restoration_service").default(false),
  upholsteryService: boolean("upholstery_service").default(false),
  features: jsonb("features").$type<string[]>().default([]),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  deliveryAvailable: boolean("delivery_available").default(false),
  deliveryCharges: decimal("delivery_charges", { precision: 8, scale: 2 }),
  freeDelivery: boolean("free_delivery").default(false),
  pickupAvailable: boolean("pickup_available").default(true),
  shippingOptions: jsonb("shipping_options").$type<string[]>().default([]),
  exchangeAccepted: boolean("exchange_accepted").default(false),
  exchangePreferences: text("exchange_preferences"),
  returnPolicy: text("return_policy"),
  returnPeriodDays: integer("return_period_days"),
  refundAvailable: boolean("refund_available").default(false),
  sellerId: varchar("seller_id").references(() => users.id, { onDelete: "set null" }),
  sellerType: text("seller_type"),
  shopName: text("shop_name"),
  showroomName: text("showroom_name"),
  contactPerson: text("contact_person"),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  whatsappNumber: text("whatsapp_number"),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address"),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  reasonForSelling: text("reason_for_selling"),
  purchasedFrom: text("purchased_from"),
  purchaseDate: text("purchase_date"),
  careInstructions: text("care_instructions"),
  additionalInfo: text("additional_info"),
  businessName: text("business_name"),
  registrationNumber: text("registration_number"),
  experienceYears: integer("experience_years"),
  certifications: jsonb("certifications").$type<string[]>().default([]),
  portfolioUrl: text("portfolio_url"),
  workingHours: text("working_hours"),
  workingDays: text("working_days"),
  available24_7: boolean("available_24_7").default(false),
  advanceBookingRequired: boolean("advance_booking_required").default(false),
  baseServiceCharge: decimal("base_service_charge", { precision: 10, scale: 2 }),
  pricePerSqft: decimal("price_per_sqft", { precision: 8, scale: 2 }),
  minimumOrderValue: decimal("minimum_order_value", { precision: 10, scale: 2 }),
  bulkDiscountAvailable: boolean("bulk_discount_available").default(false),
  paymentMethods: jsonb("payment_methods").$type<string[]>().default([]),
  advancePaymentRequired: boolean("advance_payment_required").default(false),
  advancePaymentPercentage: decimal("advance_payment_percentage", { precision: 5, scale: 2 }),
  emiAvailable: boolean("emi_available").default(false),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  inStock: boolean("in_stock").default(true),
  stockQuantity: integer("stock_quantity"),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  isUrgent: boolean("is_urgent").default(false),
  viewCount: integer("view_count").default(0),
  inquiryCount: integer("inquiry_count").default(0),
  favoriteCount: integer("favorite_count").default(0),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertFurnitureInteriorDecorSchema = createInsertSchema(furnitureInteriorDecor).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertFurnitureInteriorDecor = z.infer<typeof insertFurnitureInteriorDecorSchema>;
export type FurnitureInteriorDecor = typeof furnitureInteriorDecor.$inferSelect;

// Household Services
export const householdServices = pgTable("household_services", {
  id: varchar("id").primaryKey().$defaultFn(() => crypto.randomUUID()),
  title: text("title").notNull(),
  description: text("description"),
  serviceType: text("service_type").notNull(),
  serviceCategory: text("service_category"),
  servicesOffered: jsonb("services_offered").$type<string[]>().default([]),
  baseServiceCharge: decimal("base_service_charge", { precision: 10, scale: 2 }).notNull(),
  hourlyRate: decimal("hourly_rate", { precision: 8, scale: 2 }),
  minimumCharge: decimal("minimum_charge", { precision: 8, scale: 2 }),
  pricingType: text("pricing_type").default("fixed"),
  freeInspection: boolean("free_inspection").default(false),
  freeEstimate: boolean("free_estimate").default(true),
  emergencyService: boolean("emergency_service").default(false),
  emergencyCharges: decimal("emergency_charges", { precision: 8, scale: 2 }),
  sameDayService: boolean("same_day_service").default(false),
  warrantyProvided: boolean("warranty_provided").default(false),
  warrantyPeriod: text("warranty_period"),
  warrantyDetails: text("warranty_details"),
  available24_7: boolean("available_24_7").default(false),
  workingHours: text("working_hours"),
  workingDays: text("working_days"),
  advanceBookingRequired: boolean("advance_booking_required").default(false),
  minimumBookingHours: integer("minimum_booking_hours").default(2),
  businessName: text("business_name"),
  ownerName: text("owner_name"),
  registrationNumber: text("registration_number"),
  experienceYears: integer("experience_years"),
  teamSize: integer("team_size"),
  certifiedProfessional: boolean("certified_professional").default(false),
  certificationDetails: text("certification_details"),
  residentialService: boolean("residential_service").default(true),
  commercialService: boolean("commercial_service").default(false),
  industrialService: boolean("industrial_service").default(false),
  specializations: jsonb("specializations").$type<string[]>().default([]),
  equipmentProvided: boolean("equipment_provided").default(true),
  materialsIncluded: boolean("materials_included").default(false),
  contactPerson: text("contact_person").notNull(),
  contactPhone: text("contact_phone").notNull(),
  contactEmail: text("contact_email"),
  alternatePhone: text("alternate_phone"),
  whatsappNumber: text("whatsapp_number"),
  whatsappAvailable: boolean("whatsapp_available").default(false),
  country: text("country").notNull().default("India"),
  stateProvince: text("state_province"),
  city: text("city"),
  areaName: text("area_name"),
  fullAddress: text("full_address").notNull(),
  locationId: varchar("location_id").references(() => locations.id, { onDelete: "set null" }),
  serviceAreas: jsonb("service_areas").$type<string[]>().default([]),
  serviceRadiusKm: integer("service_radius_km"),
  travelCharges: decimal("travel_charges", { precision: 8, scale: 2 }),
  homeVisitAvailable: boolean("home_visit_available").default(true),
  pickupService: boolean("pickup_service").default(false),
  onsiteRepair: boolean("onsite_repair").default(true),
  offsiteRepair: boolean("offsite_repair").default(false),
  consultationAvailable: boolean("consultation_available").default(false),
  consultationCharges: decimal("consultation_charges", { precision: 8, scale: 2 }),
  seniorCitizenDiscount: boolean("senior_citizen_discount").default(false),
  firstTimeDiscount: boolean("first_time_discount").default(false),
  bulkServiceDiscount: boolean("bulk_service_discount").default(false),
  contractAvailable: boolean("contract_available").default(false),
  amcAvailable: boolean("amc_available").default(false),
  images: jsonb("images").$type<string[]>().default([]),
  videos: jsonb("videos").$type<string[]>().default([]),
  documents: jsonb("documents").$type<string[]>().default([]),
  certifications: jsonb("certifications").$type<string[]>().default([]),
  portfolioImages: jsonb("portfolio_images").$type<string[]>().default([]),
  paymentMethods: jsonb("payment_methods").$type<string[]>().default([]),
  advancePaymentRequired: boolean("advance_payment_required").default(false),
  advancePaymentPercentage: decimal("advance_payment_percentage", { precision: 5, scale: 2 }),
  cashOnDelivery: boolean("cash_on_delivery").default(true),
  digitalPayment: boolean("digital_payment").default(true),
  termsAndConditions: text("terms_and_conditions"),
  cancellationPolicy: text("cancellation_policy"),
  refundPolicy: text("refund_policy"),
  privacyPolicy: text("privacy_policy"),
  customerSupportNumber: text("customer_support_number"),
  supportEmail: text("support_email"),
  responseTime: text("response_time"),
  complaintNumber: text("complaint_number"),
  rating: decimal("rating", { precision: 3, scale: 2 }),
  reviewCount: integer("review_count").default(0),
  totalJobsCompleted: integer("total_jobs_completed").default(0),
  totalCustomers: integer("total_customers").default(0),
  repeatCustomerPercentage: decimal("repeat_customer_percentage", { precision: 5, scale: 2 }),
  availabilityStatus: text("availability_status").default("available"),
  isActive: boolean("is_active").default(true),
  isFeatured: boolean("is_featured").default(false),
  isVerified: boolean("is_verified").default(false),
  isBackgroundVerified: boolean("is_background_verified").default(false),
  ownerId: varchar("owner_id").references(() => users.id, { onDelete: "set null" }),
  viewCount: integer("view_count").default(0),
  inquiryCount: integer("inquiry_count").default(0),
  bookingCount: integer("booking_count").default(0),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const insertHouseholdServiceSchema = createInsertSchema(householdServices).omit({ id: true, createdAt: true, updatedAt: true });
export type InsertHouseholdService = z.infer<typeof insertHouseholdServiceSchema>;
export type HouseholdService = typeof householdServices.$inferSelect;